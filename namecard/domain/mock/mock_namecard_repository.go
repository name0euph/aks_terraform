// Code generated by MockGen. DO NOT EDIT.
// Source: namecard_repository.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "backend-namecard/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockINamecardRepository is a mock of INamecardRepository interface.
type MockINamecardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockINamecardRepositoryMockRecorder
}

// MockINamecardRepositoryMockRecorder is the mock recorder for MockINamecardRepository.
type MockINamecardRepositoryMockRecorder struct {
	mock *MockINamecardRepository
}

// NewMockINamecardRepository creates a new mock instance.
func NewMockINamecardRepository(ctrl *gomock.Controller) *MockINamecardRepository {
	mock := &MockINamecardRepository{ctrl: ctrl}
	mock.recorder = &MockINamecardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINamecardRepository) EXPECT() *MockINamecardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockINamecardRepository) Create(namecard *domain.Namecard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", namecard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockINamecardRepositoryMockRecorder) Create(namecard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockINamecardRepository)(nil).Create), namecard)
}

// Delete mocks base method.
func (m *MockINamecardRepository) Delete(namecardId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namecardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockINamecardRepositoryMockRecorder) Delete(namecardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockINamecardRepository)(nil).Delete), namecardId)
}

// FindAll mocks base method.
func (m *MockINamecardRepository) FindAll(namecards *[]domain.Namecard, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", namecards, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockINamecardRepositoryMockRecorder) FindAll(namecards, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockINamecardRepository)(nil).FindAll), namecards, userId)
}

// FindById mocks base method.
func (m *MockINamecardRepository) FindById(namecard *domain.Namecard, namecardId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", namecard, namecardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockINamecardRepositoryMockRecorder) FindById(namecard, namecardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockINamecardRepository)(nil).FindById), namecard, namecardId)
}

// Update mocks base method.
func (m *MockINamecardRepository) Update(namecard *domain.Namecard, namecardId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", namecard, namecardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockINamecardRepositoryMockRecorder) Update(namecard, namecardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockINamecardRepository)(nil).Update), namecard, namecardId)
}
